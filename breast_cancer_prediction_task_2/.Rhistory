setwd("/Users/shaikmohammadasrarahammad/Downloads/Internship/codealpha/breast_cancer_prediction_task_2")
# Load required libraries
install.packages("randomForest")
library(randomForest)
# Load the dataset
data("BreastCancer", package = "mlbench")
installed.packages("mlbench")
library(randomForest)
# Load the dataset
data("BreastCancer", package = "mlbench")
install.packages("mlbench")
library(randomForest)
# Load the dataset
data("BreastCancer", package = "mlbench")
bc_data <- BreastCancer
# Split the data into training and testing sets
set.seed(123)
train_indices <- sample(1:nrow(bc_data), 0.7 * nrow(bc_data))
train_data <- bc_data[train_indices, ]
test_data <- bc_data[-train_indices, ]
# Define the predictor variables (features) and the target variable
predictors <- c("Cl.thickness", "Cell.size", "Cell.shape", "Marg.adhesion", "Epith.c.size", "Bare.nuclei", "Bl.cromatin", "Normal.nucleoli", "Mitoses")
target <- "Class"
# Train the random forest model
rf_model <- randomForest(Class ~ ., data = train_data[predictors], ntree = 100, importance = TRUE)
target <- c("Class")
# Train the random forest model
rf_model <- randomForest(Class ~ ., data = train_data[predictors], ntree = 100, importance = TRUE)
# Predict on the test set
predictions <- predict(rf_model, test_data[predictors])
# Train the random forest model
rf_model <- randomForest(Class ~ ., data = train_data[predictors], ntree = 100, importance = TRUE)
# Train the random forest model
rf_model <- randomForest(target ~ ., data = train_data[predictors], ntree = 100, importance = TRUE)
# Train the random forest model
rf_model <- randomForest(Class ~ ., data = train_data[predictors], ntree = 100, importance = TRUE)
# Load the Wisconsin Diagnostic Breast Cancer Dataset
library(caret)
# Load the Wisconsin Diagnostic Breast Cancer Dataset
library(ggplot2)
library(lattice)
library(caret)
data("breastCancerWisconsin")
install.packages("caret")
install.packages("caret")
library(caret)
data("breastCancerWisconsin")
# Load the Wisconsin Diagnostic Breast Cancer Dataset
install.packages('caret')
library(caret)
data("breastCancerWisconsin")
# Install the mlbench package if necessary
if (!requireNamespace("mlbench", quietly = TRUE))
install.packages("mlbench")
# Load the Breast Cancer UCI Dataset
library(mlbench)
data("cancer")
# Load the breast cancer dataset
data("BreastCancer", package = "mlbench")
# Assign the dataset to a variable
bc_data <- BreastCancer
view(bc_data)
View(bc_data)
# Data Exploration
table(bc_data$Class)
round(prop.table(table(bc_data$Class)) * 100, digits = 1)
cor(select(bc_data,-Class))
sum(is.na(bc_data))
bc_data_clean<-na.omit(bc_data)
sum(is.na(bc_data_clean))
summary(bc_data_clean)
# Data transformation
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
new_bc_data <- as.data.frame(lapply(select(bc_data_clean,-Class), normalize))
## Loading Library
library(readr)
library(class)
library(gmodels)
library(dplyr)
install.packages(gmodels)
install.packages('gmodels')
library(gmodels)
library(dplyr)
new_bc_data <- as.data.frame(lapply(select(bc_data_clean,-Class), normalize))
bc_data_clean<-select(bc_data_clean,-Id)
colnames(bc_data_clean)[colnames(data) == "Class"] <- "diagnosis"
colnames(bc_data_clean)[colnames(bc_data_clean) == "Class"] <- "diagnosis"
new_bcd <- as.data.frame(lapply(select(bcd,-diagnosis), normalize))
new_bcd <- as.data.frame(lapply(select(bc_data_clean,-diagnosis), normalize))
View(bc_data_clean)
summary(bc_data_clean)
